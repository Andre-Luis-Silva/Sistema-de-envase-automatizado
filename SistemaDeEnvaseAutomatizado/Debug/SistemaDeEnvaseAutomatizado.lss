
SistemaDeEnvaseAutomatizado.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a4  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075a  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fc  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000184  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

#include "comum.h"

unsigned char g_flagPortaAtiva, flagPorta1, flagPorta2;
int main(void)
{
  90:	ff cf       	rjmp	.-2      	; 0x90 <main>

00000092 <__vector_16>:
	TCNT0 = 0;
	
}

ISR( TIMER0_OVF_vect )
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	
	TCNT0 = 255 - 125;
  a2:	82 e8       	ldi	r24, 0x82	; 130
  a4:	86 bd       	out	0x26, r24	; 38
	if( (flagPorta1 == 1) && (BOT1_PRESS == PRESS))
  a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flagPorta1>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <__vector_16+0x32>
  ae:	32 99       	sbic	0x06, 2	; 6
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <__vector_16+0x32>
	{
		g_flagPortaAtiva = 0;
  b2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <g_flagPortaAtiva>
		timeoutPorta = 0;
  b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		flagPorta1 = 0;
  ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flagPorta1>
		LED1_OFF;
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	88 b9       	out	0x08, r24	; 8
	}
	if( (flagPorta2 == 1) && (BOT2_PRESS == PRESS))
  c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flagPorta2>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	59 f4       	brne	.+22     	; 0xe2 <__vector_16+0x50>
  cc:	33 99       	sbic	0x06, 3	; 6
  ce:	09 c0       	rjmp	.+18     	; 0xe2 <__vector_16+0x50>
	{
		g_flagPortaAtiva = 0;
  d0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <g_flagPortaAtiva>
		timeoutPorta = 0;
  d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		flagPorta2 = 0;
  d8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flagPorta2>
		LED2_OFF;
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	88 b9       	out	0x08, r24	; 8
	}
	if( timer1segundo < 1000 )
  e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer1segundo>
  e6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer1segundo+0x1>
  ea:	88 3e       	cpi	r24, 0xE8	; 232
  ec:	23 e0       	ldi	r18, 0x03	; 3
  ee:	92 07       	cpc	r25, r18
  f0:	30 f4       	brcc	.+12     	; 0xfe <__vector_16+0x6c>
	{
		timer1segundo++;
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer1segundo+0x1>
  f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer1segundo>
  fc:	19 c0       	rjmp	.+50     	; 0x130 <__vector_16+0x9e>
	}
	else
	{
		timer1segundo = 0;
  fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer1segundo+0x1>
 102:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer1segundo>
		if( g_flagPortaAtiva )
 106:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_flagPortaAtiva>
 10a:	88 23       	and	r24, r24
 10c:	89 f0       	breq	.+34     	; 0x130 <__vector_16+0x9e>
		{
			timeoutPorta++;
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if( (timeoutPorta >= 5) )
 118:	85 30       	cpi	r24, 0x05	; 5
 11a:	50 f0       	brcs	.+20     	; 0x130 <__vector_16+0x9e>
			{
				g_flagPortaAtiva = 0;
 11c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <g_flagPortaAtiva>
				timeoutPorta = 0;
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				LED1_OFF;
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	88 b9       	out	0x08, r24	; 8
				LED2_OFF;
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	88 b9       	out	0x08, r24	; 8
			}
		}
	}
	
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <LeSerial>:
	}
}

unsigned char LeSerial( void )
{
	return UDR0;	//Retorna a leitura da Serial
 140:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 144:	08 95       	ret

00000146 <__vector_18>:

ISR( USART_RX_vect )
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	recebeuDado = LeSerial();	// Flag para indicar que recebeu o dado
 168:	0e 94 a0 00 	call	0x140	; 0x140 <LeSerial>
 16c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <recebeuDado>
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
